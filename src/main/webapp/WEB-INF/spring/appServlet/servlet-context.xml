<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<!-- #5. appServlet 관련 설정 -->
	
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- 이미지, css등 자원 경로 -->
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!-- Dispatcher default ViewResolver빈 -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- #12.1 jsonView Bean 및 viewResolver 등록 -->
	<!-- 요청한 viewName과 실제 bean이름을 매핑해주는 BeanNameViewResolver를 사용함 -->
	<!-- bean 아이디는 viewResolver로 반드시 지정. 처리순서를 1로 우선처리되도록 함 -->
	<beans:bean id="viewResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver">
        <beans:property name="order" value="1"/>
    </beans:bean>   
	<beans:bean id="jsonView" class="net.sf.json.spring.web.servlet.view.JsonView"/>
	
	<!-- #13.1 @Responsebody사용을 위한 의존 : 빈등록 (스프링 5.x.x => MappingJackson2HttpMessageConverter -->
	<beans:bean id="jacksonMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" />
	<beans:bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<beans:property name="messageConverters">
			<beans:list>
				<beans:ref bean="jacksonMessageConverter"/>
			</beans:list>
		</beans:property>
	</beans:bean>
	
	<!-- 스프링 컨테이너에 의해 자동 bean 등록 -->
	<!-- @Component 어노테이션이 있는 클래스를 자동으로 검색하여 bean으로 등록 -->
	<!-- 별도의 이름지정이 없다면 빈의 이름은 소문자로 시작하는 클래스명 -->
	<!-- 빈으로 등록되지 않은 클래스는 스프링 컨테이너에 의해 사용불가 -->
	
	<context:component-scan base-package="project.go.pcgogo" />
	
	<!-- #8. 로깅을 위한 interceptor 등록 -->
	<!-- DispatcherServlet이 Controller를 요청하는 중간에 interceptor가 가로채간다. -->
	<!-- 따라서 servlet-context.xml에 등록 -->
	<!-- 필요할 경우 이부분에 추가 -->
	<!-- 로그인 체크 인터셉터 -->
	<interceptors>
		<interceptor>
			<mapping path="/manager/*"/>
			<mapping path="/myPage"/>
			<mapping path="/update/*"/>
			<mapping path="/updateEnd/*"/>
			<beans:bean class="project.go.pcgogo.common.interceptor.LoginCheckInterceptor"/>
		</interceptor>
		
	</interceptors>
	
	
	<!-- #10.1 파일업로드를 처리할 Resolver클래스 빈등록(빈이름 주의) -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">   
		<beans:property name="maxUploadSize" value="10485760" /> <!-- max 파일용량은 10MB이다. -->
	</beans:bean>
	
	<!-- 비밀번호 암호화 AOP -->
	<aop:aspectj-autoproxy/>
</beans:beans>
